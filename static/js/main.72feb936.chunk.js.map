{"version":3,"sources":["assets/constants.js","components/tableHead/TableHead.js","components/table/Table.js","components/searchFilter/SearchFilter.js","components/pagination/Pagination.js","components/mobileSorting/MobileSorting.js","assets/requests.js","assets/sorting.js","assets/incomesOperations.js","assets/dataPreparation.js","App.js","assets/search.js","serviceWorker.js","index.js"],"names":["tableValues","id","name","city","totalIncome","averageIncome","lastMonthIncome","TableHead","handleSorting","objectKey","defaultSort","useState","sort","setSort","className","onClick","updatedSort","Table","data","Object","keys","map","key","index","company","IDValue","nameValue","cityValue","totalIncomeValue","averageIncomeValue","lastMonthIncomeValue","data-label","SearchFilter","handleSearch","searchTerm","setSearchTerm","type","placeholder","value","onChange","event","target","Pagination","handlePageChange","currentPage","lastPage","isUserOnFirstPage","isUserOnLastPage","disabled","MobileSorting","optionValue","setOptionValue","htmlFor","split","Number","Fragment","fetchIncomes","fetch","then","response","ok","json","catch","error","sortTable","arr","sortBy","ascending","a","b","getTotalIncome","reduce","acc","curr","getAverageIncome","length","getLastMonthIncome","previousMonthBeginning","Date","setMonth","getMonth","setDate","setHours","previousMonthEnd","date","parsedDate","prepareData","from","to","result","incomes","toFixed","Error","Promise","all","done","App","setData","preparedData","setPreparedData","setCurrentPage","elementsPerPage","isLoading","setIsLoading","setError","secondEffectShouldRun","setSecondEffectShouldRun","useEffect","prep","backgroundData","sortedTable","slice","Math","ceil","filteredTable","toLowerCase","filter","toString","includes","searchTable","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.72feb936.chunk.js","sourcesContent":["export const tableValues = {\r\n    id: 'ID',\r\n    name: 'Name',\r\n    city: 'City',\r\n    totalIncome: 'Total income',\r\n    averageIncome: 'Average income',\r\n    lastMonthIncome: 'Last month income'\r\n};\r\n\r\nexport const fetchCompaniesURL = \"https://recruitment.hal.skygate.io/companies/\";\r\nexport const fetchIncomesURL = \"https://recruitment.hal.skygate.io/incomes/\";","import React, {useState} from \"react\";\r\nimport {tableValues} from \"../../assets/constants\";\r\nimport './TableHead.scss';\r\n\r\nconst TableHead = ({handleSorting, objectKey, defaultSort = false}) => {\r\n\r\n    const [sort, setSort] = useState(defaultSort);\r\n\r\n    const handleSortChange = () => {\r\n        const updatedSort = !sort;\r\n        setSort(updatedSort);\r\n        handleSorting(objectKey, updatedSort);\r\n    }\r\n\r\n    return (\r\n        <th>\r\n            <button\r\n                className=\"btn btn__table--head\"\r\n                onClick={handleSortChange}>\r\n                {tableValues[objectKey]}\r\n            </button>\r\n        </th>\r\n    );\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\nimport TableHead from \"../tableHead/TableHead\";\r\nimport {tableValues} from \"../../assets/constants\";\r\nimport \"./Table.scss\";\r\n\r\nconst Table = ({data, handleSorting}) => {\r\n\r\n    const generateTableHead = () => {\r\n        const keys = Object.keys(tableValues);\r\n        return keys.map((key, index) => {\r\n            return <TableHead\r\n                handleSorting={handleSorting}\r\n                objectKey={key}\r\n                key={key}\r\n                // id is being sorted after first fetch, this component has to have different value\r\n                defaultSort={key === \"id\"}\r\n            />\r\n        })\r\n    }\r\n\r\n    const generateTableContent = () => {\r\n        return data.map((company, index) => {\r\n            const {id, name, city, totalIncome, averageIncome, lastMonthIncome} = company;\r\n\r\n            const {\r\n                id: IDValue,\r\n                name: nameValue,\r\n                city: cityValue,\r\n                totalIncome: totalIncomeValue,\r\n                averageIncome: averageIncomeValue,\r\n                lastMonthIncome: lastMonthIncomeValue\r\n            } = tableValues;\r\n\r\n            return (<tr key={index}>\r\n                <td data-label={IDValue}>{id}</td>\r\n                <td data-label={nameValue}>{name}</td>\r\n                <td data-label={cityValue}>{city}</td>\r\n                <td data-label={totalIncomeValue}>{totalIncome}</td>\r\n                <td data-label={averageIncomeValue}>{averageIncome}</td>\r\n                <td data-label={lastMonthIncomeValue}>{lastMonthIncome}</td>\r\n            </tr>)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainTable-container\">\r\n            <table className=\"mainTable\">\r\n                <thead>\r\n                <tr>\r\n                    {generateTableHead()}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {generateTableContent()}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","import React, {useState} from 'react';\r\nimport \"./SearchFilter.scss\";\r\n\r\nfunction SearchFilter({handleSearch}) {\r\n\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n    const handleChange = event => {\r\n        setSearchTerm(event.target.value);\r\n        handleSearch(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-container\">\r\n            <input\r\n                className=\"input-search\"\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n                value={searchTerm}\r\n                onChange={handleChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchFilter;","import React from 'react';\r\nimport \"./Pagination.scss\";\r\n\r\nfunction Pagination({handlePageChange, currentPage, lastPage}) {\r\n    const isUserOnFirstPage = currentPage === 1;\r\n    const isUserOnLastPage = currentPage === lastPage;\r\n\r\n    return (\r\n        <div className=\"pagination-container\">\r\n            <button onClick={() => handlePageChange(-1)}\r\n                    className=\"btn btn-previous\"\r\n                    disabled={isUserOnFirstPage}>\r\n                PREVIOUS\r\n            </button>\r\n            <p className=\"page-indicator\">{currentPage}/{lastPage}</p>\r\n            <button onClick={() => handlePageChange(1)}\r\n                    className=\"btn btn-next\"\r\n                    disabled={isUserOnLastPage}>\r\n                NEXT\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Pagination;","import React, {useState} from 'react';\r\nimport {tableValues} from \"../../assets/constants\";\r\nimport \"./MobileSorting.scss\";\r\n\r\nfunction MobileSorting({handleSorting}) {\r\n\r\n    const [optionValue, setOptionValue] = useState(\"id 1\");\r\n\r\n    const handleChange = event => {\r\n        setOptionValue(event.target.value);\r\n        const value = event.target.value.split(\" \")[0];\r\n        const sort = !!Number(event.target.value.split(\" \")[1]);\r\n        handleSorting(value, sort);\r\n    };\r\n\r\n    const renderOptions = () => {\r\n        const keys = Object.keys(tableValues);\r\n        return keys.map(key => {\r\n            return (<React.Fragment key={key}>\r\n                <option\r\n                    value={`${key} 1`}\r\n                >{tableValues[key]} (Ascending)\r\n                </option>\r\n                <option\r\n                    value={`${key} 0`}>{tableValues[key]} (Descending)\r\n                </option>\r\n            </React.Fragment>)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"mobile-sort\">\r\n            <label htmlFor=\"sorting\">Sort by: </label>\r\n            <select name=\"sorting\"\r\n                    onChange={handleChange}\r\n                    value={optionValue}>\r\n                {renderOptions()}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MobileSorting;","import {fetchCompaniesURL, fetchIncomesURL} from \"./constants\";\r\n\r\n/**\r\n * Fetch companies from API\r\n * @function fetchCompanies\r\n * @return {Promise} return fetched data\r\n */\r\nexport const fetchCompanies = () => {\r\n    return fetch(fetchCompaniesURL)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        })\r\n        .then(data => data)\r\n        .catch(error => error);\r\n}\r\n\r\n/**\r\n * Fetch income of companies from API\r\n * @function fetchIncomes\r\n * @Param {Number} id - fetch incomes of companies by given id\r\n * @return {Promise} return fetched incomes\r\n */\r\nexport const fetchIncomes = (id) => {\r\n    return fetch(`${fetchIncomesURL}${id}`)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        })\r\n        .then(data => data)\r\n        .catch(error => error);\r\n}\r\n","/**\r\n * Sort input array\r\n * @function sortTable\r\n * @param {Array}  arr - array of object to sort\r\n * @param {String} sortBy - word describing by what to sort\r\n * @param {Boolean} ascending - describing if output should be in ascending order, false meaning descending order\r\n * @return {Array} arr - sorted array of objects\r\n */\r\nexport const sortTable = (arr, sortBy, ascending = true) => {\r\n    return arr.sort((a, b) => {\r\n        if (a[sortBy] > b[sortBy]) return ascending ? 1 : -1;\r\n        if (a[sortBy] < b[sortBy]) return ascending ? -1 : 1;\r\n        return 0;\r\n    });\r\n};","/**\r\n * Get total income of incomes in array\r\n * @function getTotalIncome\r\n * @param {Array}  arr - array of objects with values(incomes)\r\n * @return {Number} return sum of incomes in input array\r\n */\r\nexport const getTotalIncome = (arr) => {\r\n    return arr.reduce((acc, curr) => {\r\n        const {value} = curr;\r\n        return acc + Number(value);\r\n    }, 0)\r\n};\r\n\r\n/**\r\n * Get average income of incomes in array\r\n * @function getAverageIncome\r\n * @param {Array}  arr - array of objects with values(incomes)\r\n * @return {Number} return average of incomes in input array or 0 if input array length is 0\r\n */\r\nexport const getAverageIncome = (arr) => {\r\n    return arr.reduce((acc, curr) => {\r\n        const {value} = curr;\r\n        return acc + Number(value);\r\n    }, 0) / arr.length || 0;\r\n};\r\n\r\n/**\r\n * Get last month income of incomes in array\r\n * @function getLastMonthIncome\r\n * @param {Array}  arr - array of objects with values(incomes) and dates\r\n * @return {Number} return last month income\r\n */\r\nexport const getLastMonthIncome = (arr) => {\r\n    const previousMonthBeginning = new Date();\r\n    previousMonthBeginning.setMonth(previousMonthBeginning.getMonth() - 1);\r\n    previousMonthBeginning.setDate(1);\r\n    previousMonthBeginning.setHours(0, 0, 0, 0);\r\n\r\n    const previousMonthEnd = new Date();\r\n    previousMonthEnd.setDate(1)\r\n    previousMonthEnd.setHours(0, 0, 0, 0);\r\n\r\n    return arr.reduce((acc, curr) => {\r\n        const {date, value} = curr;\r\n        const parsedDate = new Date(date);\r\n        if (previousMonthBeginning <= parsedDate &&\r\n            previousMonthEnd >= parsedDate) {\r\n            return acc + Number(value);\r\n        }\r\n        return acc;\r\n    }, 0);\r\n};","import {fetchIncomes} from \"./requests\";\r\nimport {getAverageIncome, getLastMonthIncome, getTotalIncome} from \"./incomesOperations\";\r\n\r\n/**\r\n * Prepare data that needs to be displayed on website\r\n * @function prepareData\r\n * @param {Array}  arr - array of objects\r\n * @param {Number} from - from what index data should be filed\r\n * @param {Number} to - to what index data should be filled\r\n * @return {Promise} return - prepared data\r\n */\r\nexport const prepareData = (arr, from, to) => {\r\n    const result = arr.map(async (company, index) => {\r\n        if (!(index >= from && index < to)) return company;\r\n\r\n        const {id} = company;\r\n        try {\r\n            const {incomes} = await fetchIncomes(id);\r\n            if (!incomes) {\r\n                company.totalIncome = \"No data!\";\r\n                company.averageIncome = \"No data!\";\r\n                company.lastMonthIncome = \"No data!\";\r\n            } else {\r\n                company.totalIncome = (Number(getTotalIncome(incomes).toFixed(2)));\r\n                company.averageIncome = Number(getAverageIncome(incomes).toFixed(2));\r\n                company.lastMonthIncome = Number(getLastMonthIncome(incomes).toFixed(2));\r\n            }\r\n        } catch (e) {\r\n            throw new Error(\"Something went wrong!\");\r\n        }\r\n        return company;\r\n    });\r\n\r\n    return Promise.all(result).then(done => {\r\n        return done;\r\n    });\r\n};","import React, {useEffect, useState} from 'react';\nimport Table from \"./components/table/Table\";\nimport SearchFilter from \"./components/searchFilter/SearchFilter\";\nimport Pagination from \"./components/pagination/Pagination\";\nimport MobileSorting from \"./components/mobileSorting/MobileSorting\";\nimport {fetchCompanies} from \"./assets/requests\";\nimport {sortTable} from \"./assets/sorting\";\nimport {searchTable} from \"./assets/search\";\nimport {prepareData} from \"./assets/dataPreparation\";\nimport './App.scss';\n\nconst App = () => {\n    const [data, setData] = useState([]);\n    const [preparedData, setPreparedData] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [elementsPerPage] = useState(30);\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [secondEffectShouldRun, setSecondEffectShouldRun] = useState(false);\n\n    useEffect(() => {\n        (async function () {\n            setIsLoading(true);\n            try {\n                const data = sortTable(await fetchCompanies(), \"id\", true);\n                const prep = await prepareData(data, 0, elementsPerPage);\n                setData(prep);\n                setPreparedData(prep);\n                setIsLoading(false);\n                setSecondEffectShouldRun(true);\n            } catch (e) {\n                setError(e);\n                setIsLoading(false);\n            }\n        })();\n    }, [elementsPerPage]);\n\n    useEffect(() => {\n        if (secondEffectShouldRun) {\n            (async function () {\n                try {\n                    const backgroundData = await prepareData(data, elementsPerPage, data.length);\n                    setData(backgroundData);\n                } catch (e) {\n                    setError(e);\n                }\n            })();\n            setSecondEffectShouldRun(false);\n        }\n    }, [secondEffectShouldRun, data, elementsPerPage]);\n\n    const handleSorting = (sortBy, sort) => {\n        const sortedTable = [...sortTable(preparedData, sortBy, sort)];\n        setPreparedData(sortedTable);\n        setCurrentPage(1);\n    }\n\n    const handleSearch = (searchTerm) => {\n        const filteredTable = [...searchTable(data, searchTerm)];\n        setPreparedData(filteredTable);\n        setCurrentPage(1);\n    }\n\n    const handlePageChange = (value) => {\n        if (currentPage + value > lastPage ||\n            currentPage + value < 1) {\n            return;\n        }\n        setCurrentPage(currentPage + value);\n    }\n\n    const prep = preparedData.slice((currentPage - 1) * elementsPerPage, currentPage * elementsPerPage);\n    const lastPage = Math.ceil(preparedData.length / elementsPerPage) || 1;\n\n    return (\n        <div className=\"main-container\">\n            {(isLoading) ? \"Loading!\" : null}\n            {(!isLoading && error) ? \"Something went wrong!\" : null}\n            {(!data && !isLoading) ? \"No data.\" : null}\n            <div className=\"userInput-container\">\n                <SearchFilter\n                    handleSearch={handleSearch}\n                />\n                <MobileSorting\n                    handleSorting={handleSorting}\n                />\n            </div>\n            {(preparedData.length === 0 && !isLoading) ? \"No data found.\" :\n                <Table\n                    data={prep}\n                    handleSorting={handleSorting}\n                />\n            }\n            <Pagination\n                handlePageChange={handlePageChange}\n                currentPage={currentPage}\n                lastPage={lastPage}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","/**\r\n * Filter input array by search term\r\n * @function searchTable\r\n * @param {Array}  arr - array of objects\r\n * @param {String} searchTerm\r\n * @return {Array} return - filtered array\r\n */\r\n\r\nexport const searchTable = (arr, searchTerm) => {\r\n    searchTerm = searchTerm.toLowerCase();\r\n    return arr.filter(company => {\r\n            const {id, name, city, totalIncome = 0, averageIncome = 0, lastMonthIncome = 0} = company;\r\n\r\n            return (id.toString().includes(searchTerm) ||\r\n                name.toLowerCase().includes(searchTerm) ||\r\n                city.toLowerCase().includes(searchTerm) ||\r\n                totalIncome.toString().includes(searchTerm) ||\r\n                averageIncome.toString().includes(searchTerm) ||\r\n                lastMonthIncome.toString().includes(searchTerm));\r\n        }\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}